
#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Dec 16, 2018 10:31:39 PM


import sys
import os
import time
import subprocess
import pyperclip
import JsonUtil
import hashlib
import EncryptString
import GnomicKey

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
    from tkSimpleDialog import askstring
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1
    from tkinter.simpledialog import askstring

from tkFileDialog import askopenfilename
from tkFileDialog import askdirectory
import tkMessageBox

def set_Tk_var():
    global basePath
    basePath = StringVar()
    global DataPath
    DataPath = StringVar()
    global keyPath
    keyPath = StringVar()
    global keyName
    keyName = StringVar()
    global lockCipher
    lockCipher = StringVar()
    global keyCipher
    keyCipher = StringVar()
    global DataText
    DataText = StringVar()

    global DataTextField
    DataTextField = None



def AnarchSelf():
    """Load anarch info at file
    """
    anarch_self = JsonUtil.GetJsonData("ANARCH_SELF.json")
    return anarch_self


def Key():
    """Load json key file at keyPath.
    """
    key = JsonUtil.GetJsonData(keyPath.get())
    return key


def DataFileText(path):
    """load json data file at path.
    """
    data = JsonUtil.GetJsonData(path)
    return data


def ConstructKeyCipher():
    """Get the encrypted word array from the key
        Decrypt and asseble the cipher text set
        it to the keyCipher.
    """
    enc_words = Key()['Words']
    key_shape = GnomicKey.DecryptShape(enc_words, lockCipher.get())

    if len(key_shape) > 0:
        keyCipher.set(key_shape)


def DecryptData():
    print('SevenCipher_support.DecryptData')
    """
        Decrypt & unzip the 7z file, read in data
        Delete the original json file

    """

    if keyCipher.get() == None or keyCipher.get() == "":
        KeyPrompt()        

    if keyCipher.get() is not None and DataPath is not None:
        dataExists = os.path.isfile(DataPath.get())

        if dataExists and ".7z" in DataPath.get():
            unzipped_json_path = DataPath.get().replace('.7z', '.json')
            cmdUnzipData = "7za x -o"+ os.path.dirname(DataPath.get())+ os.sep + ' -y ' + DataPath.get() + ' -p"' + keyCipher.get() + '"'
            subprocess.call(cmdUnzipData,shell=True)

            if os.path.isfile(unzipped_json_path):
                data_text = DataFileText(unzipped_json_path)['Text']
                DataText.set(data_text)
                os.remove(unzipped_json_path)
            else:
                print("No json data unzipped, so text cannot be populated.")

    sys.stdout.flush()




def EncryptData():
    print('SevenCipher_support.EncryptData')
    """
        Encrypt the text data by zipping the created json file
        Delete the original json file

    """
    if keyCipher.get() == None or keyCipher.get() == "":
        KeyPrompt()

    if 'GNOMIC_KEY' not in DataPath.get() and keyCipher.get() is not None and DataPath.get() is not None:
        dataExists = os.path.isfile(DataPath.get())

        if dataExists:
            extension = DataPath.get().split('.')
            extension = extension[len(extension)-1]
            out_file_path = DataPath.get().replace(extension, '7z')

            if extension == 'json'and DataTextField is not None:
                json_data = {}
                json_data['Text'] = DataTextField.get('1.0', 'end')
                JsonUtil.WriteJsonData(json_data, DataPath.get())

            cmdZipFile = "7za a " + out_file_path + ' -p"' + keyCipher.get() + '" ' + DataPath.get()
            subprocess.call(cmdZipFile,shell=True)
            os.remove(DataPath.get())
            DataPath.set(out_file_path)

    sys.stdout.flush()


def LoadDataFile(arg):
    """Prompt to get data file to be decrypted.
    """

    if arg == '-lock':
        DataPath.set(askopenfilename(title="LOAD DATA FILE", initialdir = initial_dir, filetypes = [('json files', '.json')]))
    elif arg == '-unlock':
        DataPath.set(askopenfilename(title="LOAD DATA FILE", initialdir = initial_dir, filetypes = [('7zip files', '.7z')]))
    else:
        DataPath.set(askopenfilename(title="LOAD DATA FILE", initialdir = initial_dir))

    sys.stdout.flush()


def LoadDataPath():
    """Prompt to get data directory to be encrypted / decrypted.
    """
    DataPath.set(askdirectory(title=" LOAD DATA PATH ", initialdir = initial_dir))
    sys.stdout.flush()


def UpdateDataText(dataText):
    print('SevenCipher_support.UpdateDataText')
    """Every time the text field is updated this is called.
        DataTextField is made global to be used by other methods
        When called by other methods, text content can be set.
    """
    global DataTextField
    DataTextField = dataText
    dataText.delete('1.0', END)
    dataText.insert(END, DataText.get())
    sys.stdout.flush()


def KeyFits(lock_hash, encrypted_lock_text):
    """Check the stored lock hash against encrypted key name.
    """
    result = False
    encrypted_lock_text_hash = hashlib.sha256(encrypted_lock_text.encode()).hexdigest()

    if lock_hash == encrypted_lock_text_hash:
        result = True

    return result


def TurnKey():
    """Get the key name, derive cipher key from encrypted key name.
        Check stored lock hashes for match, if found set lockCipher.
        Construct the Key if we have the KeyName and the lockCipher.
    """
    key = keyPath.get()
    splitKey = key.split('_')
    key = splitKey[len(splitKey)-1]
    key_name = key.split('.')[0]

    encrypted_lock_text = EncryptString.encrypt(key_name, key_name)

    for lock_hash in AnarchSelf()['Locks']:
        if KeyFits(lock_hash, encrypted_lock_text):
            keyName.set(key_name)
            lockCipher.set(encrypted_lock_text)

    if keyName.get() is not None and lockCipher.get() is not None:
        ConstructKeyCipher()
    else:
        print("Invalid Key")


def KeyPrompt():
    """Prompt to get usb key path.
    """
    keyPath.set(askopenfilename(title="SET KEY PATH", initialdir = initial_dir, filetypes = [('json files', '.json')]))
    TurnKey()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    global initial_dir
    initial_dir = str(os.path.splitdrive(__file__)[0])
    w = gui
    top_level = top
    root = top

    if len(sys.argv) > 1:
        KeyPrompt()

        arg = sys.argv[1]
        if arg == '-lock':
            LoadDataPath()
            new_file = askstring("Create File", "Enter File Name:")
            DataPath.set(DataPath.get() + os.sep + new_file + ".json")
            data = {}
            data['Text'] = ""
            JsonUtil.CreateJsonFile(DataPath.get(), data)

        elif arg == '-unlock':
            LoadDataFile(arg)
            DecryptData()

        elif arg == '-key':
            pyperclip.copy(keyCipher.get())
            result = tkMessageBox.askquestion("Copy Key", "ok", icon='warning')
            if result == "yes":
                destroy_window()
                time.sleep(10)
                pyperclip.copy("")
                sys.exit()


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import SevenCipher
    SevenCipher.vp_start_gui()